[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "galaxybox"
version = "1.0.0"
description = ""
authors = ["Joseph O'Leary <oleary.joseph@outlook.com>"]
readme = "README.md"
include = ["src/galaxybox/configs/*.yaml"]

[tool.poetry.dependencies]
python = "^3.11"
astropy = "^5.3.4"
halotools = "^0.8.2"
h5py = "^3.10.0"
matplotlib = "^3.8.1"
numpy = "^1.26.1"
pandas = "^2.1.3"
scipy = "^1.11.3"
shapely = "^2.0.2"
tqdm = "^4.66.1"
seaborn = "^0.13.0"
pyyaml = "^6.0.1"
pyarrow = "^14.0.1"
tables = "^3.9.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.2"
commitizen = "^3.24.0"
pre-commit = "^3.7.0"
jupyter = "^1.0.0"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"

[tool.ruff]
line-length = 100
src = ['src/']

[tool.ruff.lint]
select = ["E", "F", "I", "D", "N", "W291", "W292", "W293"]
ignore = ["D107"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "D104"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"


[tool.commitizen]
name = "cz_customize"
version_provider = "poetry"
version_files = ["pyproject.toml:^version"]
update_changelog_on_bump = true
bump_message = 'bump: $current_version \u2192 $new_version'
bump_pattern = "^.*?(release|break|feat|fix|refactor|docs):?"
bump_map = {"release"="MAJOR", "break"="MAJOR", "feat"="MINOR", "fix"="PATCH", "refactor"="PATCH", "docs"="PATCH"}
commit_parser = "^.*?(?P<change_type>release|break|feat|fix|refactor|docs):\\s(?P<message>.*)?"
changelog_pattern = "^(release|break|feat|fix|refactor|docs)?(!)?"

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"
